extends layout

block content
  link(rel='stylesheet', href='/stylesheets/module.css')

  script.
    document.getElementById("module").className="current";

    jQuery('document').ready(function() {
      pagination();
      jQuery('.pagination li:first-child').addClass("disabled");
    });

    //- 삭제 버튼을 눌러 모듈 정보를 삭제하는 함수
    const deleteModule = (deviceId) => {
      if(confirm("삭제하시겠습니까?")) {
        $.ajax({
          data: {
            'deviceId': deviceId
          },
          type: 'get',
          dataType : 'html',
          url: "/module/api/delete", 
          contentType: 'application/json', 
          success: (success) => {
            alert('삭제완료');
            location.reload();
          },
          error: (err) => {
            alert('삭제실패');
            console.log(err)
          }
        })
      }
    }

    //- 테이블의 데이터를 한번에 6개씩 보여주는 pagination 함수
    const pagination = () => {
      const rowNum = 6;      //- 한 페이지에 보여줄 데이터 갯수
      let $tr = jQuery('tbody tr');
      const totalRowNum = $tr.length;
      let pagesNum = 0;

      //- 총 만들 페이지 갯수 계산
      if(totalRowNum % rowNum == 0) {
        pagesNum = totalRowNum / rowNum;
      }
      else if(totalRowNum % rowNum > 0) {
        pagesNum = totalRowNum / rowNum;
        pagesNum++;
        pagesNum = Math.floor(pagesNum++);
      }

      //- 나눈 갯수만큼 페이지 버튼 생성
      for(let i=1; i<=pagesNum; i++) {
        jQuery('.pagination').append(`<li><button class="btn-dark">${i}</button></li>`);
        jQuery('.pagination button').addClass("pagination-link");
      }

      $tr.each(function(i) {
        jQuery(this).hide();

        if(i+1 <= rowNum) {
          $tr.eq(i).show();
        }
      });

      //- 첫 페이지 선택을 표시하기 위해 버튼의 클래스 제거 -> 흰색 버튼 됨
      jQuery('.pagination li:nth-child(1)').children(":first").removeClass("btn-dark");

      //- pagination의 페이지 버튼을 클릭할 때 작동하는 함수
      jQuery('.pagination button').click('.pagination-link', function(e) {
        e.preventDefault();
        $tr.hide();
        let page = jQuery(this).text();
        let tmp = page - 1;
        let start = tmp * rowNum;
        let currentLink = tmp;

        //- 해당 페이지 확인 중을 표시하기 위해 선택된 버튼의 클래스를 제거하여 흰색으로 표시
        jQuery('.pagination button').addClass("btn-dark");
        jQuery(this).removeClass("btn-dark");

        for(let i=0; i<rowNum; i++) {
          $tr.eq(start+i).show();
        }
      });
    }

  p#title(style="margin-top:5%;") 장치 목록 

  table#listTable(border='1')
    thead
      tr
        th 장치 이름
        th 장치 유형
        th 장치 위치
        th 등록 일자
        th 수정
        th 삭제
    each list in moduleList
      tbody
        tr
          td #{list.deviceId}
          td #{list.deviceType}
          td #{list.location}
          td #{list.rgstDt}
          td
            button.btn.btn-dark(class='form-control' onClick=`location.href='/modifyModule?deviceId=${list.deviceId}'`) 수정
          td
            button.btn.btn-dark(class='form-control' onClick=`deleteModule('${list.deviceId}')`) 삭제
  br
  ul(class='pagination')
  div
    button.btn.btn-dark(onclick="location.href='/registModule'" style='margin-left: 5px') 새 장치 등록