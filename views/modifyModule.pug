extends layout

block content
  link(rel='stylesheet', href='/stylesheets/module.css')
  include secret
  
  script.
    document.getElementById("module").className="current";

    //- 수정 페이지에서 장치 이름에 따른 장치 유형을 받아오기 위한 작업
    //- html의 select를 받아와 변경시키기 때문에 페이지가 다 로딩된 후 작업해야 함
    $(document).ready(function() {
      $.ajax({
        data: {
          'deviceId': document.getElementById("deviceId").value,
        },
        type: 'get',
        dataType : 'html',
        url: "/modifyModule/api/findType", 
        contentType: 'application/json', 
        success: (success) => {
          const type = success;
          const selectType = document.getElementById("deviceType");
          const len = selectType.options.length;

          //- select의 option들 중 DB와 값이 일치하는 것이 선택되도록 설정
          for(let i=0; i<len; i++) {
            if(selectType.options[i].value === type) {
              selectType.options[i].selected = "selected";
            }
          }
        },
        error: (err) => {
          console.log(err)
        }
      })
    })

    //- 수정하여 정보를 백엔드로 넘기는 함수
    const modifyModule = () => {
      const deviceTypeOption = document.getElementById("deviceType");
      const deviceType = deviceTypeOption.options[deviceTypeOption.selectedIndex].value;

      $.ajax({
        data: JSON.stringify({
          'deviceId': document.getElementById("deviceId").value,
          'deviceType': deviceType,
          'location': document.getElementById("location").value
        }),
        type: 'post',
        dataType : 'html',
        url: "/modifyModule/api/modify", 
        contentType: 'application/json', 
        success: (success) => {
          alert('수정완료');
          location.href='/module';
        },
        error: (err) => {
          alert('수정실패');
          console.log(err)
        }
      })
    }

    //- 장치 위치 input 클릭 시 kakao map 띄우는 함수
    let flag = true;      //- 요소 중복 생성 방지 boolean
    const popUp = () => {
      const modal = document.getElementById('myModal');
      const span = document.getElementsByClassName("close")[0];

      //- 팝업창 띄움
      modal.style.display = "block";

      //- x 클릭시 팝업창 닫음
      span.onclick = function() {
        modal.style.display = "none";
      }

      //- modal 창 밖을 클릭할 경우 팝업창 닫음
      window.onclick = function(e) {
        if(e.target === modal) {
          modal.style.display = 'none';
        }
      }

      document.getElementById('modalNotice').textContent = document.getElementById('location').value;
      
      //- 지도 생성
      const mapContainer = document.getElementById("map"),
        mapOption = {
          center: new kakao.maps.LatLng(35.504113, 129.305680),
          level: 4
        };

      //- 지도 객체, 주소-좌표 변환 객체, 마커 객체, 윈도우인포 객체 생성
      const map = new kakao.maps.Map(mapContainer, mapOption);
      const geocoder = new kakao.maps.services.Geocoder();
      const marker = new kakao.maps.Marker()
      const infowindow = new kakao.maps.InfoWindow({zindex:1});

      //- 처음 지도를 띄울 때 등록된 주소에 마커를 표시
      const locationVal = document.getElementById('location').value;

      geocoder.addressSearch(locationVal, function(result, status) {
        defaultCoords = new kakao.maps.LatLng(result[0].y, result[0].x);
        displayMarker(marker, infowindow, map, defaultCoords, locationVal);
      });

      //- 지도 화면 클릭시 이벤트리스너
      kakao.maps.event.addListener(map, 'click', function(mouseEvent) {
        //- 마우스 클릭한 곳의 위도와 경도를 읽어와 도로명주소로 변환
        geocoder.coord2Address(mouseEvent.latLng.getLng(), mouseEvent.latLng.getLat(), function(result, status) {
          if(status === kakao.maps.services.Status.OK) {
            //- 도로명 주소가 없을 경우 지번 주소로 받아옴
            const detailAddr = !!result[0].road_address ? result[0].road_address.address_name : result[0].address.address_name;

            //- 마우스 클릭 위치에 마커 표시
            displayMarker(marker, infowindow, map, mouseEvent.latLng, detailAddr);

            //- 주소를 받은 후 텍스트 변경과 버튼을 띄우는 함수
            afterSelect(detailAddr);
          }
        });
      });

      //- 팝업창 내 요소들 중복 생성 방지
      if(flag) {
        createOnce();
        flag = false;
      }

      //- input 창에 주소를 입력하고 만들어진 버튼을 클릭할 시
      document.getElementById('searchButton').addEventListener('click', function() {
        //- 입력 받은 주소를 기준으로 위도, 경도 받아옴
        geocoder.addressSearch(document.getElementById('searchInput').value, function(result, status) {
          if(status === kakao.maps.services.Status.OK) {
            const coords = new kakao.maps.LatLng(result[0].y, result[0].x);

            //- 받아온 위도 경도로 정확한 도로명주소를 반환
            geocoder.coord2Address(result[0].x, result[0].y, function(result, status) {
              if(status === kakao.maps.services.Status.OK) {
                //- 도로명 주소가 없을 경우 지번 주소로 받아옴
                const detailAddr = !!result[0].road_address ? result[0].road_address.address_name : result[0].address.address_name;

                //- 해당 주소에 마커 표시
                displayMarker(marker, infowindow, map, coords, detailAddr);

                //- 해당 주소를 지도 가운데로 설정
                map.setCenter(coords);

                //- 주소를 받은 후 텍스트 변경과 버튼을 띄우는 함수
                afterSelect(detailAddr);
              }
            });
          }
        })
      })

      //- 주소를 받은 후 텍스트 변경과 버튼을 띄우는 함수
      const afterSelect = (param) => {
        const locationObj = document.getElementById('location');
        const modalNoticeObj = document.getElementById('modalNotice');

        //- 받아온 주소와 설정 버튼을 띄움
        modalNoticeObj.textContent = param;
        const confirm = '<button class="btn btn-dark" id="confirmButton" style="margin-left: 10px">설정</button>';
        modalNoticeObj.insertAdjacentHTML('beforeend', confirm);

        //- 설정버튼 클릭시 해당 주소가 장치 위치 input에 입력되며 팝업창 사라짐
        document.getElementById('confirmButton').addEventListener('click', function() {
          locationObj.value = param;
          modal.style.display = "none";
        });
      }
    }

    //- 마커 표시 함수
    const displayMarker = (marker, infowindow, map, latlan, address) => {
      //- 마커 위치 설정
      marker.setPosition(latlan);
      marker.setMap(map);

      //- 인포윈도우 내용 설정
      infowindow.setContent(`<div style="width: 150%; text-align: left; margin-left: 2px; padding: 10px;">${address}</div>`);
      infowindow.open(map, marker);
    }

    //- modal pop up을 띄울때 요소들 중복 생성을 방지하기 위한 함수
    const createOnce = () => {
      const searchInput = '<input type="text" id="searchInput" />';
      const searchButton = '<button class="btn btn-dark" style="margin-left: 5px;" id="searchButton">검색</button>';
      const searchAddObj = document.getElementById('searchAdd');

      //- searchAdd 요소 뒤에 다른 요소들을 붙임
      searchAddObj.insertAdjacentHTML('beforeend',searchInput);
      searchAddObj.insertAdjacentHTML('beforeend',searchButton);
    }

  p#title(style="margin-top:5%;") 장치 정보 수정

  table#registTable(border='1')
    tr
      th 장치 이름
      td
        input.form-control#deviceId(type='text' disabled value=moduleInfo[0].deviceId autocomplete="off")
    tr
      th 장치 유형
      td
        select.form-control#deviceType
          option(value='풍향/풍속') 풍향/풍속
          option(value='온도/습도') 온도/습도
          option(value='미세먼지') 미세먼지
    tr
      th 장치 위치
      td
        input.form-control#location(type='text' value=moduleInfo[0].location onclick="popUp()" autocomplete="off")
    tr
      th 등록 일자
      td 
        input.form-control#dateInput(type='text' disabled value=moduleInfo[0].rgstDt autocomplete="off")

  br
  div
    button.btn.btn-dark(onclick="modifyModule()" style='margin-right: 5px;') 수정
    button.btn.btn-dark(onclick="location.href='/module'" style='margin-left: 5px;') 취소

  div.modal#myModal
    div.modal-content
      span.close &times;
      p#modalNotice 
      div#searchAdd
      br
      div#map