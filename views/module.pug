extends layout

block content
  link(rel='stylesheet', href='/stylesheets/module.css')
  include secret

  script.
    document.getElementById("module").className="current";
    
    //- 사용자 정의 설정에서 달력으로 날짜 선택하기 위한 datepicker 옵션들
    $( function() {
      $.datepicker.setDefaults({
        defaultDate: new Date(),
        dateFormat: 'yy-mm-dd',
        showMonthAfterYear: true,
        monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
        monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
        dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'],
        changeMonth: true,
        changeYear: true,
      });
      $("#rgstDtInput").datepicker().val(moment().format('YYYY-MM-DD'));

      //- 페이지네이션 동작
      pagination();
      jQuery('.pagination li:first-child').addClass("disabled");

      searchFilter();
    });
    
    //- 삭제 버튼을 눌러 모듈 정보를 삭제하는 함수
    const deleteModule = (deviceId) => {
      if(confirm("삭제하시겠습니까?")) {
        $.ajax({
          data: JSON.stringify({
            'deviceId': deviceId
          }),
          type: 'post',
          dataType : 'html',
          url: "/module/api/delete", 
          contentType: 'application/json', 
          success: (success) => {
            alert('삭제완료');
            location.reload();
          },
          error: (err) => {
            alert('삭제실패');
            console.log(err)
          }
        })
      }
    }

    //- 테이블의 데이터를 한번에 6개씩 보여주는 pagination 함수
    const pagination = () => {
      const rowNum = 6;      //- 한 페이지에 보여줄 데이터 갯수
      let $tr = jQuery('tbody tr');
      const totalRowNum = $tr.length;
      let pagesNum = 0;

      //- 총 만들 페이지 갯수 계산
      if(totalRowNum % rowNum === 0) {
        pagesNum = totalRowNum / rowNum;
      }
      else if(totalRowNum % rowNum > 0) {
        pagesNum = totalRowNum / rowNum;
        pagesNum++;
        pagesNum = Math.floor(pagesNum++);
      }

      //- 나눈 갯수만큼 페이지 버튼 생성
      for(let i=1; i<=pagesNum; i++) {
        jQuery('.pagination').append(`<li><button class="btn-dark">${i}</button></li>`);
        jQuery('.pagination button').addClass("pagination-link");
      }

      $tr.each(function(i) {
        jQuery(this).hide();

        if(i+1 <= rowNum) {
          $tr.eq(i).show();
        }
      });

      //- 첫 페이지 선택을 표시하기 위해 버튼의 클래스 제거 -> 흰색 버튼 됨
      jQuery('.pagination li:nth-child(1)').children(":first").removeClass("btn-dark");

      //- pagination의 페이지 버튼을 클릭할 때 작동하는 함수
      jQuery('.pagination button').click('.pagination-link', function(e) {
        e.preventDefault();
        $tr.hide();
        let page = jQuery(this).text();
        let tmp = page - 1;
        let start = tmp * rowNum;
        let currentLink = tmp;

        //- 해당 페이지 확인 중을 표시하기 위해 선택된 버튼의 클래스를 제거하여 흰색으로 표시
        jQuery('.pagination button').addClass("btn-dark");
        jQuery(this).removeClass("btn-dark");

        for(let i=0; i<rowNum; i++) {
          $tr.eq(start+i).show();
        }
      });
    }
    
    //- 검색창의 왼쪽 필터 작동 함수
    const searchFilter = () => {
      //- 필터 속  모든 li 속성 요소들에 event listener 등록
      const list = document.querySelector('#filter').querySelectorAll('li');
      for(let i=0; i<list.length; i++) {
        list[i].addEventListener('click', function(e) {
          e.preventDefault();

          //- 선택한 필터는 hidden input인 searchParam의 value가 됨
          document.getElementById('searchConcept').textContent = this.textContent;
          document.getElementById('searchParam').value = this.getAttribute("id");

          document.getElementById('notice').setAttribute('style', 'display: none;');

          //- 필터에서 선택된 값에 따라 보여주는 검색창을 다르게 함
          document.getElementById('deviceIdInput').style.display = 'none';
          document.getElementById('deviceTypeInput').style.display = 'none';
          document.getElementById('locationInput').style.display = 'none';
          document.getElementById('rgstDtInput').style.display = 'none';
          document.getElementById(this.getAttribute("id")+'Input').style.display = 'block';

          document.getElementById('searchButton').disabled = false;
        })
      }
    }

    //- 검색 버튼을 눌렀을 때 작동하는 함수
    const searchModule = () => {
      const column = document.getElementById('searchParam').value;      //- 검색할 콜럼 저장
      const matching = document.getElementById(column+'Input').value;   //- 검색할 값 저장

      if(matching !== '') {
        $.ajax({
          data: {
            'column': column,
            'matching': matching,
          },
          type: 'get',
          dataType : 'html',
          url: "/module/api/moduleSearch", 
          contentType: 'application/json', 
          success: (result) => {
            console.log(result);
            $("#listTable > tbody").html(result);
            jQuery('.pagination *').remove();
            pagination();
          },
          error: (err) => {
            console.log(err)
          }
        })
      } else {
        alert("검색어를 입력해주세요.");
      }
    }

    //- 테이블을 숨기고 kakao map을 보여주는 함수
    const showMap = () => {
      document.getElementById('tableDiv').style.display = 'none';
      document.getElementById('mapDiv').style.display = 'block';
      document.getElementById('mapButton').hidden = true;
      document.getElementById('tableButton').hidden = false;

      //- map 객체 기본 설정
      const mapContainer = mapDiv,
            mapOption = {
              center: new kakao.maps.LatLng(35.504113, 129.305680),
              level: 8
            }
      //- map 객체 생성
      const map = new kakao.maps.Map(mapContainer, mapOption);

      //- 마커와 인포윈도우를 위한 배열
      let deviceId = [];
      let location = [];
      let markers = [];
      let cnt = 0;

      //- DB에서 deviceId와 location 정보를 받아옴
      $.ajax({
        type: 'get',
        dataType : 'json',
        url: "/module/api/showMap", 
        contentType: 'application/json', 
        success: (result) => {
          //- 배열에 복사
          for(let i=0; i<result.length; i++) {
            deviceId.push(result[i].deviceId);
            location.push(result[i].location);
          }

          const geocoder = new kakao.maps.services.Geocoder();
          for(let i=0; i<location.length; i++) {
            geocoder.addressSearch(location[i], function(result, status) {
              let now = location[i];
              if(status === kakao.maps.services.Status.OK) {
                //- DB속 location의 주소로 위도, 경도를 받아와 마커 생성
                const marker = new kakao.maps.Marker({
                  position: new kakao.maps.LatLng(result[0].y, result[0].x)
                });
                marker.setMap(map);
                
                //- 소수점 3자리 까지만 표시
                const fineX = ((result[0].x)*1).toFixed(3);
                const fineY = ((result[0].y)*1).toFixed(3);

                //- 위도와 경도, 주소를 가지는 임시 객체 생성하여 markers에 push
                const obj = {
                  y: fineY,
                  x: fineX,
                  location: now
                };
                markers[i] = obj;

                //- DB속 location의 주소를 표시하는 인포윈도우 생성
                const infowindow = new kakao.maps.InfoWindow({zindex:1});
                infowindow.setContent(`<div style="width: 150%; text-align: left; margin-left: 2px; padding: 10px;">${location[i]}</div>`);
                infowindow.open(map, marker);

                //- 마커에 마우스 올리면 zindex 변경하여 보기에 더 앞에 보이도록 함
                kakao.maps.event.addListener(marker, 'mouseover', function() {
                  infowindow.setZIndex(3);
                  marker.setZIndex(3);
                })

                kakao.maps.event.addListener(marker, 'mouseout', function() {
                  infowindow.setZIndex(1);
                  marker.setZIndex(1);
                })
              }

              cnt++;
              //- 동기를 위해 cnt 변수를 이용하여 데이터 갯수만큼 다 반복을 마쳐야 작동하도록 함
              if(cnt === (location.length)) {
                //- 경도를 기준으로 정렬
                markers.sort(function(i, j) {
                  return (i.y < j.y ? -1 : i.y > i.x ? 1 : 0);
                });

                //- 위치가 비슷한 애들끼리 모은 배열을 생성하고 최종 결과를 group 배열에 push
                let tmpCnt = 0;
                let group = [];
                let tmp = [];

                for(let i=0; i<markers.length; i++) {
                  //- 임시배열이 비어있으면 현재 markers 값을 push
                  if(tmpCnt == 0) {
                    tmp.push(markers[i]);
                  }
                  //- 임시배열에 값이 있다면 해당 값과 다음 markers의 값과 비교하여 일정 범위 내 이면 임시배열에 추가
                  if(Math.abs(tmp[tmpCnt].x-markers[i].x) < 0.01 && Math.abs(tmp[tmpCnt].y-markers[i].y) < 0.03) {
                    tmp.push(markers[i]);
                    tmpCnt++;
                  } else {    //- 일정 범위 밖에 해당한다면 i에 1을 빼서 다시 되돌리고 임시배열 내용을 group 배열에 push
                    i--;
                    tmp.shift();
                    group.push(tmp);
                    tmpCnt=0;
                    tmp=[];
                  }
                }
                console.log("===result===");
                console.log(group);
              }
            });
          }
        },
        error: (err) => {
          console.log(err)
        }
      });
    }
    
    //- kakao map을 숨기고 테이블을 보여주는 함수
    const showTable = () => {
      document.getElementById('tableDiv').style.display = 'block';
      document.getElementById('mapDiv').style.display = 'none';
      document.getElementById('mapButton').hidden = false;
      document.getElementById('tableButton').hidden = true;
    }

  p#title(style="margin-top:2%;") 장치 목록 
  div#tableDiv
    div.container 
      div.row
        div.col-6.offset-3
          div.input-group
            div.input-group-btn.search-panel
              div.dropdown
                button.btn.btn-btn-default.dropdown-toggle(type="button" data-toggle="dropdown")
                  span#searchConcept Filter by
                  span#caret
                ul.dropdown-menu#filter
                  li.dropdown-item#deviceId 장치이름
                  li.dropdown-divider
                  li.dropdown-item#deviceType 장치유형
                  li.dropdown-divider
                  li.dropdown-item#location 장치위치
                  li.dropdown-divider
                  li.dropdown-item#rgstDt 등록일자
            
            input#searchParam(type="hidden" autocomplete="off")
            input.form-control#notice(type="text" value="왼쪽 필터를 설정해주세요." disabled)
            input.form-control#deviceIdInput(type="text" placeholder="장치 이름을 입력하세요." autocomplete="off" style='display: none;')
            input.form-control#locationInput(type="text" placeholder="장치 위치를 입력하세요." autocomplete="off" style='display: none;')
            select#deviceTypeInput(style="width: 370px; text-align-last: center; display: none")
              option(value='풍향/풍속') 풍향/풍속
              option(value='온도/습도') 온도/습도
              option(value='미세먼지') 미세먼지
            input#rgstDtInput(type="input" style="width: 370px; text-align:center; display: none" autocomplete="off")
            button.btn.btn-dark#searchButton(type="button" onClick="searchModule()" disabled) search
              
    br
    table#listTable(border='1')
      thead
        tr
          th 장치 이름
          th 장치 유형
          th 장치 위치
          th 등록 일자
          th 수정
          th 삭제
      tbody
      each list in moduleList
        tr
          td #{list.deviceId}
          td #{list.deviceType}
          td #{list.location}
          td #{list.rgstDt}
          td
            button.btn.btn-dark.form-control(onClick=`location.href='/modifyModule?deviceId=${list.deviceId}'`) 수정
          td
            button.btn.btn-dark.form-control(onClick=`deleteModule('${list.deviceId}')`) 삭제
    br
    ul(class='pagination')

  div#mapDiv(style="display: none; width:1000px; height: 425px; margin: 0 auto;")
  br

  div
    button.btn.btn-dark(onclick="location.href='/registModule'" style='margin-right: 5px;') 새 장치 등록
    button.btn.btn-dark#mapButton(onclick="showMap()" style='margin-left: 5px;') 지도로 보기
    button.btn.btn-dark#tableButton(onclick="showTable()" style='margin-left: 5px;' hidden) 표로 보기