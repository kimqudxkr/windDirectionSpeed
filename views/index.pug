extends layout

block content
  link(rel='stylesheet', href='/stylesheets/index.css')
  <script src="https://code.highcharts.com/highcharts.js"></script>
  <script src="https://code.highcharts.com/modules/exporting.js"></script>
  <script src="https://code.highcharts.com/modules/export-data.js"></script>
  <script src="https://code.highcharts.com/modules/accessibility.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

  script.
    document.getElementById("real").className="current";

    //- 처음 페이지 표시시 실시간 데이터와 최근 10시간 데이터 표시
    $(document).ready(function() {
      updateData();
      updateChart();
      });

    //- 초기 실시간 데이터 조회는 3초 간격
    const defaultInterval = setInterval(function() {  
      updateData();
    }, 3000);

    //- 최근 10시간 데이터 조회는 1시간 간격
    setInterval(function() {
      updateChart();
    }, 3600000);
    
    //- 실시간 자료 조회 페이지에서 실시간 자료를 표시하기 위한 함수
    const updateData = () => {
      $.ajax({
        type: 'get', 
        dataType : 'html', 
        url: "/api/updateData", 
        contentType: 'application/json', 
        success: (html) => {
          $("#nowTable > tbody").html(html);
        },
        error: (err) => {
          console.log(err)
        }
      })
    }

    //- 실시간 자료 조회 페이지에서 최근 10시간 데이터를 표시하기 위한 함수
    const updateChart = () => {
      $.ajax({
        type: 'get', 
        dataType : 'json', 
        url: "/api/updateChart", 
        contentType: 'application/json', 
        success: (result) => {
          $.each(result, function(index, item) {
            for(let i=0; i<10; i++) {
              //- 새로운 데이터를 위하여 myChart에 존재중인 데이터 제거
              myChart.data.labels.splice(-1,1);
              myChart.data.datasets.forEach((datasets) => {
                datasets.data.pop();
              });
            }

            for(let i=0; i<10; i++) {
              //- myChart에 받아온 데이터들을 삽입
              myChart.data.labels.push(item[i].rgstDt);
              myChart.data.datasets.forEach((datasets) => {
                datasets.data.push(item[i].windSpeed);
              });
            }
          })
          myChart.update();
        },
        error: (err) => {
          console.log(err)
        }
      })
    }

    //- 실시간 자료 조회 새로고침 주기를 설정하는 함수
    let flag = false;
    let refresh;
    const setUpdateTerm = () => {
      clearInterval(defaultInterval); 
      if(flag) 
        clearInterval(refresh);

      const selectOption = document.getElementById("updateTerm");
      const timeout = selectOption.options[selectOption.selectedIndex].value*1000;
      flag = true;
      
      refresh = setInterval(function() {
        updateData();
      }, timeout);

    }

  .row(style='margin: 0 auto')
    .col-5(style='margin: 0 auto')
      h1 실시간 자료 조회
      table#nowTable
        thead
          tr
            th(colspan='2', style='background-color:#dadada') 실시간 데이터
        tbody
      br
      p 새로고침 주기 : 
        select#updateTerm(style='width:60px; height:30px',onChange="setUpdateTerm()")
          option(value=1) 1초
          option(value=3, selected) 3초
          option(value=5) 5초

    .col-6(style='margin: 0 auto')
      h1(style='text-align:center') 최근 10시간 데이터
      .container
        canvas#myChart

      script.
        //- myChart 옵션 설정 부분
        const ctx = document.getElementById('myChart'); 
        const myChart = new Chart(ctx, { 
          type: 'bar', 
          data: { 
            labels: [],
            datasets: [{ label: '평균 풍속(m/s) ', 
                         data: [], 
                         backgroundColor: [], 
                         borderColor: [], 
                         borderWidth: 1
                      }]
          }, 
          options: {
            legend: {
              labels: {
                fontFamily: "Do Hyeon"
              }
            },
            scales: { 
              yAxes: [{ 
                ticks: { beginAtZero: true }
              }]
            }
          }
        });
        
        //- myChart 표 색 설정 부분
        const greenBg = 'rgba(43,255,0,0.4)';
        const greenBd = 'rgba(43, 255, 0, 1)';
        
        for(let i=0; i<10; i++) {
          myChart.data.datasets.forEach((backgroundColor) => {
            backgroundColor.backgroundColor.push(greenBg);
          });
          myChart.data.datasets.forEach((borderColor) => {
            borderColor.borderColor.push(greenBd);
          });
        }