extends layout

block content
  link(rel='stylesheet', href='/stylesheets/module.css')
 
  script.
    document.getElementById("module").className="current";
    
    //- 사용자 정의 설정에서 달력으로 날짜 선택하기 위한 datepicker 옵션들
    $( function() {
      $.datepicker.setDefaults({
        defaultDate: new Date(),
        dateFormat: 'yy-mm-dd',
        showMonthAfterYear: true,
        monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
        monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
        dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'],
        changeMonth: true,
        changeYear: true,
      });
      $("#rgstDtInput").datepicker().val(moment().format('YYYY-MM-DD'));

      //- 페이지네이션 동작
      pagination();
      jQuery('.pagination li:first-child').addClass("disabled");

      searchFilter();
    });
    
    //- 삭제 버튼을 눌러 모듈 정보를 삭제하는 함수
    const deleteModule = (deviceId) => {
      if(confirm("삭제하시겠습니까?")) {
        $.ajax({
          data: JSON.stringify({
            'deviceId': deviceId
          }),
          type: 'post',
          dataType : 'html',
          url: "/module/api/delete", 
          contentType: 'application/json', 
          success: (success) => {
            alert('삭제완료');
            location.reload();
          },
          error: (err) => {
            alert('삭제실패');
            console.log(err)
          }
        })
      }
    }

    //- 테이블의 데이터를 한번에 6개씩 보여주는 pagination 함수
    const pagination = () => {
      const rowNum = 6;      //- 한 페이지에 보여줄 데이터 갯수
      let $tr = jQuery('tbody tr');
      const totalRowNum = $tr.length;
      let pagesNum = 0;

      //- 총 만들 페이지 갯수 계산
      if(totalRowNum % rowNum === 0) {
        pagesNum = totalRowNum / rowNum;
      }
      else if(totalRowNum % rowNum > 0) {
        pagesNum = totalRowNum / rowNum;
        pagesNum++;
        pagesNum = Math.floor(pagesNum++);
      }

      //- 나눈 갯수만큼 페이지 버튼 생성
      for(let i=1; i<=pagesNum; i++) {
        jQuery('.pagination').append(`<li><button class="btn-dark">${i}</button></li>`);
        jQuery('.pagination button').addClass("pagination-link");
      }

      $tr.each(function(i) {
        jQuery(this).hide();

        if(i+1 <= rowNum) {
          $tr.eq(i).show();
        }
      });

      //- 첫 페이지 선택을 표시하기 위해 버튼의 클래스 제거 -> 흰색 버튼 됨
      jQuery('.pagination li:nth-child(1)').children(":first").removeClass("btn-dark");

      //- pagination의 페이지 버튼을 클릭할 때 작동하는 함수
      jQuery('.pagination button').click('.pagination-link', function(e) {
        e.preventDefault();
        $tr.hide();
        let page = jQuery(this).text();
        let tmp = page - 1;
        let start = tmp * rowNum;
        let currentLink = tmp;

        //- 해당 페이지 확인 중을 표시하기 위해 선택된 버튼의 클래스를 제거하여 흰색으로 표시
        jQuery('.pagination button').addClass("btn-dark");
        jQuery(this).removeClass("btn-dark");

        for(let i=0; i<rowNum; i++) {
          $tr.eq(start+i).show();
        }
      });
    }
    
    //- 검색창의 왼쪽 필터 작동 함수
    const searchFilter = () => {
      //- 필터 속  모든 li 속성 요소들에 event listener 등록
      const list = document.querySelector('#filter').querySelectorAll('li');
      for(let i=0; i<list.length; i++) {
        list[i].addEventListener('click', function(e) {
          e.preventDefault();

          //- 선택한 필터는 hidden input인 searchParam의 value가 됨
          document.getElementById('searchConcept').textContent = this.textContent;
          document.getElementById('searchParam').value = this.getAttribute("id");

          document.getElementById('notice').setAttribute('style', 'display: none;');

          //- 필터에서 선택된 값에 따라 보여주는 검색창을 다르게 함
          document.getElementById('deviceIdInput').style.display = 'none';
          document.getElementById('deviceTypeInput').style.display = 'none';
          document.getElementById('locationInput').style.display = 'none';
          document.getElementById('rgstDtInput').style.display = 'none';
          document.getElementById(this.getAttribute("id")+'Input').style.display = 'block';

          document.getElementById('searchButton').disabled = false;
        })
      }
    }

    //- 검색 버튼을 눌렀을 때 작동하는 함수
    const searchModule = () => {
      const column = document.getElementById('searchParam').value;      //- 검색할 콜럼 저장
      const matching = document.getElementById(column+'Input').value;   //- 검색할 값 저장

      if(matching !== '') {
        $.ajax({
          data: {
            'column': column,
            'matching': matching,
          },
          type: 'get',
          dataType : 'html',
          url: "/module/api/moduleSearch", 
          contentType: 'application/json', 
          success: (result) => {
            console.log(result);
            $("#listTable > tbody").html(result);
            jQuery('.pagination *').remove();
            pagination();
          },
          error: (err) => {
            console.log(err)
          }
        })
      } else {
        alert("검색어를 입력해주세요.");
      }
    }

  p#title(style="margin-top:2%;") 장치 목록 

  div.container 
    div.row
      div.col-6.offset-3
        div.input-group
          div.input-group-btn.search-panel
            div.dropdown
              button.btn.btn-btn-default.dropdown-toggle(type="button" data-toggle="dropdown")
                span#searchConcept Filter by
                span#caret
              ul.dropdown-menu#filter
                li.dropdown-item#deviceId 장치이름
                li.dropdown-divider
                li.dropdown-item#deviceType 장치유형
                li.dropdown-divider
                li.dropdown-item#location 장치위치
                li.dropdown-divider
                li.dropdown-item#rgstDt 등록일자
          
          input#searchParam(type="hidden" name="serch-param" autocomplete="off")
          input.form-control#notice(type="text" value="왼쪽 필터를 설정해주세요." disabled)
          input.form-control#deviceIdInput(type="text" placeholder="장치 이름을 입력하세요." autocomplete="off" style='display: none;')
          input.form-control#locationInput(type="text" placeholder="장치 위치를 입력하세요." autocomplete="off" style='display: none;')
          select#deviceTypeInput(style="width: 370px; text-align-last: center; display: none")
            option(value='풍향/풍속') 풍향/풍속
            option(value='온도/습도') 온도/습도
            option(value='미세먼지') 미세먼지
          input#rgstDtInput(type="input" style="width: 370px; text-align:center; display: none" autocomplete="off")
          button.btn.btn-dark#searchButton(type="button" onClick="searchModule()" disabled) search
            
  br
  table#listTable(border='1')
    thead
      tr
        th 장치 이름
        th 장치 유형
        th 장치 위치
        th 등록 일자
        th 수정
        th 삭제
    tbody
     each list in moduleList
      tr
        td #{list.deviceId}
        td #{list.deviceType}
        td #{list.location}
        td #{list.rgstDt}
        td
          button.btn.btn-dark.form-control(onClick=`location.href='/modifyModule?deviceId=${list.deviceId}'`) 수정
        td
          button.btn.btn-dark.form-control(onClick=`deleteModule('${list.deviceId}')`) 삭제
  br
  ul(class='pagination')
  div
    button.btn.btn-dark(onclick="location.href='/registModule'") 새 장치 등록